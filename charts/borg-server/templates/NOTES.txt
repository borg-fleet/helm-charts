{{- if not .Values.config.sshd_config_mounts }}
!!! Important !!!

Your SSH host keys will regenerate on every deployment restart.
This is bad if you rely on trust on first use. Please follow these steps to make the current host keys permananent:

  1. Run "kubectl exec deployment/{{ include "borg-server.fullname" . }} -c borg-server -- bash -c 'more /etc/ssh/ssh_host* | cat'"
  2. Go to your values.yaml and for each of these files create a key config.sshd_config_mounts.<filename> with the value being the file contents.
     Example:
      config:
        sshd_config_mounts:
          ssh_host_ecdsa_key.pub: "ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBJLiq7fRNNdYWxnZjEVFz1k8W1cmC11pIKOuhBE0zX22iHI86rkHQxtmwHJcBxQNwtwOeZD5hJTbXfjbNiH+Rpw= root@borg-server-6bd84cbf66-k5zq4"
  3. Upgrade your deployment with the new values. You now have persistent host keys.
{{- end }}

Get the application URL by running these commands:
{{- if .Values.ingress.enabled }}
{{- range $host := .Values.ingress.hosts }}
  echo "Run \"borg init --encryption=repokey-blake2 ssh://{{ $host.host }}/~/backup\" to create a borg repo"
{{- end }}
{{- else if contains "NodePort" .Values.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "borg-server.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo "Run \"borg init --encryption=repokey-blake2 ssh://$NODE_IP:$NODE_PORT/~/backup\" to create a borg repo"
{{- else if contains "LoadBalancer" .Values.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "borg-server.fullname" . }}'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "borg-server.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo "Run \"borg init --encryption=repokey-blake2 ssh://$SERVICE_IP:{{ .Values.service.port }}/~/backup\" to create a borg repo"
{{- else if contains "ClusterIP" .Values.service.type }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "borg-server.name" . }},app.kubernetes.io/instance={{ .Release.Name }}" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo 'Run "borg init --encryption=repokey-blake2 ssh://myuser@localhost:2222/~/backup" to create a borg repo'
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 2222:$CONTAINER_PORT
{{- end }}
